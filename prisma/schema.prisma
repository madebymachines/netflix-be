// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                     @id @default(autoincrement())
  name                  String
  username              String                  @unique
  email                 String                  @unique
  password              String
  phoneNumber           String?
  profilePictureUrl     String?
  country               String?
  purchaseStatus        PurchaseStatus          @default(NOT_VERIFIED)
  emailVerifiedAt       DateTime?
  role                  Role                    @default(USER)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  tokens                Token[]
  purchaseVerifications PurchaseVerification[]
  activityHistory       ActivityHistory[]
  stats                 UserStats?
}

model PurchaseVerification {
  id              Int            @id @default(autoincrement())
  userId          Int
  receiptImageUrl String
  status          PurchaseStatus @default(PENDING)
  rejectionReason String?
  submittedAt     DateTime       @default(now())
  reviewedAt      DateTime?
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ActivityHistory {
  id           Int      @id @default(autoincrement())
  userId       Int
  eventType    String // 'INDIVIDUAL', 'GROUP'
  pointsEarn   Int
  pointsFrom   Int
  pointsTo     Int
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserStats {
  userId          Int      @id
  totalPoints     Int      @default(0)
  totalChallenges Int      @default(0)
  currentStreak   Int      @default(0)
  topStreak       Int      @default(0)
  lastUpdated     DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
}

enum PurchaseStatus {
  NOT_VERIFIED
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  USER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}