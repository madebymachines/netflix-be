// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                    @id @default(autoincrement())
  username              String                 @unique
  email                 String                 @unique
  password              String
  profilePictureUrl     String?
  country               String?
  purchaseStatus        PurchaseStatus         @default(NOT_VERIFIED)
  emailVerifiedAt       DateTime?
  isBanned              Boolean                @default(false)
  bannedAt              DateTime?
  banReason             String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  tokens                Token[]
  purchaseVerifications PurchaseVerification[]
  activityHistory       ActivityHistory[]
  stats                 UserStats?
}

model Admin {
  id         Int         @id @default(autoincrement())
  name       String
  email      String      @unique
  password   String
  role       AdminRole
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  tokens     Token[]
  exportJobs ExportJob[]
}

model PurchaseVerification {
  id              Int            @id @default(autoincrement())
  userId          Int
  receiptImageUrl String
  status          PurchaseStatus @default(PENDING)
  rejectionReason String?
  submittedAt     DateTime       @default(now())
  reviewedAt      DateTime?
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  type            PurchaseType   @default(RECEIPT)
}

model ActivityHistory {
  id                 Int            @id @default(autoincrement())
  userId             Int
  eventType          String // 'INDIVIDUAL', 'GROUP'
  pointsEarn         Int
  pointsFrom         Int
  pointsTo           Int
  submissionImageUrl String?
  status             PurchaseStatus @default(PENDING)
  rejectionReason    String?
  reviewedAt         DateTime?
  createdAt          DateTime       @default(now())
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  isFlagged          Boolean        @default(false)
  flagReason         String?
}

model UserStats {
  userId          Int      @id
  totalPoints     Int      @default(0)
  totalChallenges Int      @default(0)
  currentStreak   Int      @default(0)
  topStreak       Int      @default(0)
  lastUpdated     DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int?
  admin       Admin?    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId     Int?
}

model ExportJob {
  id                 Int        @id @default(autoincrement())
  jobId              String     @unique @default(uuid())
  type               ExportType
  status             JobStatus  @default(PENDING)
  filters            Json
  downloadUrl        String?
  error              String?
  notificationEmail  String?
  requestedByAdminId Int
  admin              Admin      @relation(fields: [requestedByAdminId], references: [id], onDelete: Cascade)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  completedAt        DateTime?
}

enum ExportType {
  PARTICIPANTS
  LEADERBOARD
  VERIFICATIONS
  SUBMISSIONS
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum Gender {
  MALE
  FEMALE
}

enum PurchaseType {
  MEMBER_GYM
  RECEIPT
}

enum PurchaseStatus {
  NOT_VERIFIED
  PENDING
  APPROVED
  REJECTED
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}